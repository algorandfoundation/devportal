---
import { getEntryBySlug } from 'astro:content';
import { parse } from 'marked';

const { docPath, maxDepth = Infinity } = Astro.props;
const [collection, ...slugParts] = docPath.split('/');
const slug = slugParts.join('/');
const entry = await getEntryBySlug(collection, slug);

if (!entry) {
  throw new Error(`Document not found: ${docPath}`);
}

const headings = [];
parse(entry.body, {
  renderer: {
    heading(text, level) {
      if (level <= maxDepth) {
        headings.push({ text, level });
      }
    },
  },
});

const renderHeadings = (headings, level) => {
  return (
    <ul>
      {headings
        .filter(heading => heading.level === level)
        .map(heading => (
          <li>
            {heading.text}
            {renderHeadings(
              headings.filter(subHeading => subHeading.level === level + 1 && subHeading.parent === heading.text),
              level + 1
            )}
          </li>
        ))}
    </ul>
  );
};
---

<style>
  ul {
    list-style: disc;
    padding-left: 20px;
  }

  ul ul {
    list-style: circle;
  }
</style>

{renderHeadings(headings, 1)}