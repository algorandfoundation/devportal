name: Claude Documentation Review

on:
  pull_request:
    paths:
      - '**/*.md'
      - '**/*.mdx'
    types: [opened, synchronize, reopened]

jobs:
  claude-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed markdown files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **/*.md
            **/*.mdx

      - name: Review with Claude
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        with:
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');

            // Install dependencies with force to bypass peer dependency conflicts
            execSync('npm install @anthropic-ai/sdk@latest --force', { stdio: 'pipe' });

            const Anthropic = require('@anthropic-ai/sdk');

            const anthropic = new Anthropic({
              apiKey: process.env.ANTHROPIC_API_KEY,
            });

            // Review criteria prompt
            const REVIEW_PROMPT = `
            You are a technical documentation reviewer for a developer portal. Please review the following markdown content and provide feedback based on these criteria:

            **Content Quality:**
            - Grammar and spelling accuracy
            - Clarity and readability
            - Technical accuracy
            - Completeness of information

            **Structure & Format:**
            - Proper heading hierarchy (H1 ‚Üí H2 ‚Üí H3)
            - Consistent use of code blocks with appropriate language tags
            - Proper list formatting and nesting
            - Effective use of callouts/admonitions

            **Style & Voice:**
            - Consistent tone (professional but approachable)
            - Active voice where appropriate
            - Clear, concise language
            - Avoid jargon without explanation

            **Documentation Standards:**
            - Code examples are complete and runnable
            - API references include all required parameters
            - Links are properly formatted and descriptive
            - Images have alt text when present

            **Link Quality:**
            - Links use proper markdown syntax [text](url)
            - Link text is descriptive (avoid "click here", "read more")
            - URLs are complete with proper protocols (https://)
            - Internal links use relative paths consistently
            - No malformed or incomplete URLs
            - External links point to reputable sources
            - Note: I cannot test if links actually work, only check formatting

            **Format your response as follows:**
            - If the content looks good overall, start with "‚úÖ **Overall Assessment: Approved**"
            - If there are issues to address, start with "‚ö†Ô∏è **Overall Assessment: Needs Revision**"
            - Then provide specific, actionable feedback organized by section
            - Use line numbers when referencing specific issues
            - Be constructive and helpful in your suggestions

            Please review this markdown content:
            `;

            const MAX_FILE_SIZE = 50000; // 50KB limit

            async function reviewWithClaude(content, filename) {
              try {
                const response = await anthropic.messages.create({
                  model: 'claude-sonnet-4-20250514',
                  max_tokens: 2000,
                  messages: [{
                    role: 'user',
                    content: `${REVIEW_PROMPT}\n\n## File: ${filename}\n\n\`\`\`markdown\n${content}\n\`\`\``
                  }]
                });

                return response.content[0].text;
              } catch (error) {
                console.error(`Error calling Claude API for ${filename}:`, error);
                return `‚ùå **Error**: Unable to review ${filename} - API call failed`;
              }
            }

            // Get changed files
            const changedFiles = '${{ steps.changed-files.outputs.all_changed_files }}'.split(' ');
            const markdownFiles = changedFiles.filter(file => 
              file.endsWith('.md') || file.endsWith('.mdx')
            );

            if (markdownFiles.length === 0) {
              console.log('‚ÑπÔ∏è No markdown files to review');
              return;
            }

            console.log(`üîç Reviewing ${markdownFiles.length} markdown files...`);

            // Review each file
            for (const file of markdownFiles) {
              if (!fs.existsSync(file)) {
                console.log(`‚ö†Ô∏è File ${file} not found, skipping...`);
                continue;
              }

              try {
                const content = fs.readFileSync(file, 'utf8');
                
                if (content.length > MAX_FILE_SIZE) {
                  console.log(`‚ö†Ô∏è File ${file} is too large (${content.length} chars), skipping...`);
                  continue;
                }

                console.log(`üìù Reviewing ${file}...`);
                const review = await reviewWithClaude(content, file);

                // Post review comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `## ü§ñ Claude Documentation Review - \`${file}\`\n\n${review}`
                });

                console.log(`‚úÖ Posted review comment for ${file}`);

                // Rate limiting
                await new Promise(resolve => setTimeout(resolve, 1000));

              } catch (error) {
                console.error(`‚ùå Error processing ${file}:`, error);
              }
            }

            console.log('‚úÖ Review process completed');
