name: Deploy to Cloudflare Pages

# Trigger on push to main branch and pull requests to main
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install Dependencies
      - name: Install D2
        run: curl -fsSL https://d2lang.com/install.sh | sh -s -- --tala

      # Step 3: Set up Node.js (used by Astro)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Specify the required Node.js version

      # Step 4: Setup Python for importing docs
      - name: Setup Python for importing docs
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      # Step 5: Install pnpm
      - name: Install pnpm
        run: |
          npm install -g pnpm@^9.0.0

      # Step 6: Install dependencies using pnpm
      - name: Install dependencies
        run: pnpm install

      # Step 7: Build the Astro project
      - name: Build the project
        run: pnpm run build
        env:
          TSTRUCT_TOKEN: ${{ secrets.TSTRUCT_TOKEN }}

      # Step 8: Install Wrangler and deploy directly using "wrangler pages deploy"
      - name: Install and Deploy with Wrangler
        id: deploy
        run: |
          npm install -g wrangler@3
          # Deploy using "wrangler pages deploy" (not publish)
          DEPLOYMENT_URL=$(wrangler pages deploy dist \
            --project-name=${{ secrets.CF_PROJECT_NAME }} \
            --account-id=${{ secrets.CF_ACCOUNT_ID }} \
            --api-token=${{ secrets.CLOUDFLARE_API_TOKEN }} \
            --commit-dirty=true \
            --branch="${{ github.head_ref || github.ref_name }}" \
            --commit-hash=${{ github.sha }} \
            --json | jq -r '.url')

          # Set the URL as an output for later steps
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

          # Create a GitHub deployment if GITHUB_TOKEN is available
          if [[ -n "${{ secrets.GITHUB_TOKEN }}" ]]; then
            echo "Creating GitHub deployment..."
            # Add GitHub deployment commands here if needed
          fi

      # Step 9: Capture PR Information (PR ID and Title) - FIXED DEPRECATED SYNTAX
      - name: Capture PR Information
        id: pr_info
        if: github.event_name == 'pull_request'
        run: |
          echo "pr_id=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "pr_title<<EOF" >> $GITHUB_OUTPUT
          echo "${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Step 10: Post the Preview URL, PR ID, and PR Title to Slack
      - name: Post to Slack
        id: slack
        if: github.event_name == 'pull_request'
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "pr_id": "${{ steps.pr_info.outputs.pr_id }}",
              "pr_title": "${{ steps.pr_info.outputs.pr_title }}",
              "preview_url": "${{ steps.deploy.outputs.url }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_PR_WEBHOOK_URL }}
